{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>octo-linter is a tool that validates GitHub Actions workflow and action YAML files.  It checks for syntax errors, such as calling invalid inputs and outputs, and lints for missing descriptions, invalid naming conventions, and other best practice violations, ensuring your workflows are error-free and adhere to GitHub Actions and your company standards.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>The tool was developed during a large-scale refactor of existing GitHub Actions code, which was scattered across multiple repositories with no consistent standards in place.  To streamline the process and reduce manual effort, it made sense to automate many of the checks that would otherwise fall to the reviewer.  Notably, GitHub does not raise errors in several cases \u2014 for example, when referencing a non-existent input, it simply substitutes it with an empty string.  This behaviour can be difficult to detect, particularly when code is being moved or restructured during refactoring. </p>"},{"location":"#demo","title":"Demo","text":"<p>Please navigate to Demo to see example usage.</p>"},{"location":"all-rules/","title":"All rules","text":""},{"location":"all-rules/#default-configuration","title":"Default configuration","text":"<p>If no configuration file is passed when running the octo-linter, its default configuration will be used. That configuration contains all possible rules and it can be found here.</p>"},{"location":"all-rules/#initialize-configuration-file","title":"Initialize configuration file","text":"<p>Use <code>init</code> command that will create a sample configuration file named <code>dotgithub.yml</code> in current directory. Use <code>-d</code> to write it in another place.</p>"},{"location":"all-rules/#list-of-rules","title":"List of rules","text":"<p>The list below outlines all available rules that can be defined in the configuration file to validate the compliance of our GitHub Actions code.</p> Rule Description rule_action_called_input_exists Scans the action code for all input references and verifies that each has been previously defined. During action execution, if a reference to an undefined input is found, it is replaced with an empty string. rule_action_called_step_output_exists Checks whether references to step outputs correspond to outputs defined in preceding steps. During execution, referencing a non-existent step output results in an empty string. rule_action_called_variable Verifies that referenced variables such as 'env', 'var', and 'secret' follow the defined casing rule. Currently, only 'uppercase-underscores' is supported, meaning variables must be fully uppercase and may include underscores. rule_action_called_variable_not_in_double_quote Scans for all variable references enclosed in double quotes. It is safer to use single quotes, as double quotes expand certain characters and may allow the execution of sub-commands. rule_action_called_variable_not_one_word Checks for variable references that are single-word or single-level, e.g. '${{ something }}' instead of '${{ inputs.something }}'. Only the values 'true' and 'false' are permitted in this form; all other variables are considered invalid. rule_action_directory_name Checks whether the action directory name adheres to the selected naming convention. Currently, only 'lowercase-hyphens' is supported, meaning the name must be entirely lowercase and use hyphens only. rule_action_file_extensions Checks if action file extension is one of the specific values, eg. 'yml' or 'yaml'. rule_action_input_required Checks whether specific input attributes are defined (e.g. 'description'). Currently, only the 'description' attribute is supported. rule_action_input_value Verifies whether the action input field follows the specified naming convention \u2014 for example, ensuring the 'name' field uses 'lowercase-hyphens' (lowercase letters, digits, and hyphens only). rule_action_output_required Checks whether specific output attributes are defined (e.g. 'description'). Currently, only the 'description' attribute is supported. rule_action_output_value Verifies whether the action output field follows the specified naming convention \u2014 for example, ensuring the 'name' field uses 'lowercase-hyphens' (lowercase letters, digits, and hyphens only). rule_action_required Checks whether the specified action fields are present, e.g. 'name'. rule_step_action Checks whether the referenced actions have valid paths. This rule can be configured to allow local actions, external actions, or both. rule_step_action_exists Verifies that the action referenced in a step actually exists. It can be configured to allow only local actions (within the same repository), external actions, or both. rule_step_action_input_valid Verifies that all required inputs are provided when referencing an action in a step, and that no undefined inputs are used. rule_step_env Checks whether step environment variable names follow the specified naming convention. Currently, only 'uppercase-underscores' is supported, meaning variable names may contain uppercase letters, numbers, and underscores only. rule_workflow_call_input_required Checks whether specific workflow_call input attributes are defined (e.g. 'description'). Currently, only the 'description' attribute is supported. rule_workflow_call_input_value Verifies whether the workflow_call input field follows the specified naming convention \u2014 for example, ensuring the 'name' field uses 'lowercase-hyphens' (lowercase letters, digits, and hyphens only). rule_workflow_called_input_exists Scans the code for all input references and verifies that each has been previously defined. During execution, if a reference to an undefined input is found, it is replaced with an empty string. rule_workflow_called_variable Verifies that referenced variables such as 'env', 'var', and 'secret' follow the defined casing rule. Currently, only 'uppercase-underscores' is supported, meaning variables must be fully uppercase and may include underscores. rule_workflow_called_variable_exists_in_file Checks if called variables and secrets exist. This rule requires a list of variables and secrets to be checked against. rule_workflow_called_variable_not_in_double_quote.go Scans for all variable references enclosed in double quotes. It is safer to use single quotes, as double quotes expand certain characters and may allow the execution of sub-commands. rule_workflow_called_variable_not_one_word Checks for variable references that are single-word or single-level, e.g. '${{ something }}' instead of '${{ inputs.something }}'. Only the values 'true' and 'false' are permitted in this form; all other variables are considered invalid. rule_workflow_dispatch_input_required Checks whether specific workflow_dispatch input attributes are defined (e.g. 'description'). Currently, only the 'description' attribute is supported. rule_workflow_dispatch_input_value Verifies whether the workflow_dispatch input field follows the specified naming convention \u2014 for example, ensuring the 'name' field uses 'lowercase-hyphens' (lowercase letters, digits, and hyphens only). rule_workflow_env Checks whether workflow environment variable names follow the specified naming convention. Currently, only 'uppercase-underscores' is supported, meaning variable names may contain uppercase letters, numbers, and underscores only. rule_workflow_file_extensions Checks if workflow file extension is one of the specific values, eg. 'yml' or 'yaml'. rule_workflow_job_env Checks whether workflow job environment variable names follow the specified naming convention. Currently, only 'uppercase-underscores' is supported, meaning variable names may contain uppercase letters, numbers, and underscores only. rule_workflow_job_needs_exist Checks if 'needs' references existing jobs. rule_workflow_job_value Checks if workflow job fields follow specified naming convention, for example if 'name' is 'lowercase-hyphens'. rule_workflow_required Checks whether the specified workflow fields are present, e.g. 'name'. rule_workflow_required_uses_or_runs_on Checks if workflow has 'runs-on' or 'uses' field. At least of them must be defined. rule_workflow_runs_on_not_latest Checks whether 'runs-on' does not contain the 'latest' string. In some case, runner version (image) should be frozen, instead of using the latest. rule_workflow_single_job_main Checks if workflow's only job is called 'main' - just for naming consistency."},{"location":"building/","title":"Building","text":""},{"location":"building/#binary","title":"Binary","text":"<p>Run <code>go build -o octo-linter</code> to compile the binary.</p> <p>Use <code>GOOS</code> and <code>GOARCH</code> environment variables to build binary for a specific platform.  More information can be found in the Go docs.</p>"},{"location":"building/#docker-image","title":"Docker image","text":"<p>To build the docker image, use the following command.</p> <pre><code>docker build -t octo-linter .\n</code></pre> <p>If an image is built on a different platform than <code>linux/amd64</code>, an additional <code>--platform=linux/amd64</code> argument is necessary.  See command reference for <code>docker build</code>.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>octo-linter requires a configuration file that defines compliance rules. This section explains how to create one in more detail.</p>"},{"location":"configuration/#initialise-configuration-file","title":"Initialise configuration file","text":"<p>Use <code>init</code> command that will create a sample configuration file named <code>dotgithub.yml</code> in current directory. Use <code>-d</code> to write it in another place.</p>"},{"location":"configuration/#requirements","title":"Requirements","text":"<p>Let\u2019s consider a GitHub repository that contains workflows and actions within the <code>.github</code> directory. Several  developers are contributing to it, and we want to enforce the following rules for the files in that directory:</p> <ul> <li>Action names must use only lowercase alphanumeric characters and hyphens</li> <li>Action and workflow files should have a .yml extension</li> <li>Named-value variables should not be enclosed in double quotes</li> <li>The use of the latest runner version should be avoided</li> <li>Actions, along with their inputs and outputs (where applicable), must include both <code>name</code> and <code>description</code> fields</li> <li>Only local actions should be used</li> <li>Environment variables in steps must use uppercase alphanumeric characters, optionally including underscores</li> </ul> <p>Additionally, it would be useful to automatically verify that all referenced inputs, outputs, and similar entities are properly defined.</p> <p>There are many more possible rules, but we\u2019ll focus on these for the purpose of this example.</p>"},{"location":"configuration/#configuration-file","title":"Configuration file","text":"<p>Tweak the configuration file with rules that the application would use.</p> <p>Based on the list in previous section, the configuration file can look as shown below.</p> <pre><code>version: '2'\nrules:\n  # Action names must use only lowercase alphanumeric characters and hyphens\n  action_directory_name: lowercase-hyphens\n\n  # Action and workflow files should have a .yml extension\n  action_file_extensions: ['yml']\n  workflow_file_extensions: ['yml']\n  action_called_variable_not_in_double_quote: true\n\n  # Named-value variables should not be enclosed in double quotes\n  workflow_called_variable_not_in_double_quote: true\n\n  # The use of the latest runner version should be avoided\n  workflow_runs_on_not_latest: true\n\n  # Actions, along with their inputs and outputs (where applicable), must include both name and description fields\n  action_required__name: true \n  action_required__description: true\n  action_input_required__description: true\n  action_output_required__description: true\n\n  # Only local actions should be used\n  action_step_action: local-only\n\n  # Environment variables in steps must use uppercase alphanumeric characters, optionally including underscores\n  action_step_env: uppercase-underscores \n\n  # All referenced inputs, outputs, and similar entities are properly defined\n  action_called_input_exists: true \n  action_called_step_output_exists: true\n  workflow_called_variable_exists_in_file: true\n  workflow_called_input_exists: true\n</code></pre>"},{"location":"configuration/#error-or-warning","title":"Error or warning","text":"<p>A non-compliant rule can be treated either as an error or a warning. If a rule is intended to trigger only a warning, it should be included in the warning_only list, as shown below:</p> <pre><code>warning_only:\n  - action_directory_name\n  - action_file_extensions\n  - workflow_file_extensions\n</code></pre> <p>Continue to the next section to learn how to run <code>octo-linter</code> using the prepared configuration.</p>"},{"location":"demo/","title":"Demo","text":""},{"location":"demo/#clone-and-run","title":"Clone and run","text":"<p>An example configuration file and <code>.github</code> directory structure can be found in the <code>example</code> directory of the  repository. Use below commands to see octo-linter in action:</p> <pre><code>git clone https://github.com/keenbytes/octo-linter.git\ncd octo-linter/example\n\ndocker run --platform=linux/amd64 --rm --name octo-linter \\\n  -v $(pwd)/dot-github:/dot-github \\\n  -v $(pwd):/config \\\n  keenbytes/octo-linter:v1.3.0 \\\n  lint -p /dot-github -l WARN -c /config/config.yml\n</code></pre>"},{"location":"demo/#output","title":"Output","text":"<p>This should generate an output similar to the following:</p> <pre><code>time=2025-06-08T21:18:42.537Z level=WARN msg=\"action_file_extensions: action 'InvalidActionExtension' file extension must be one of: yml\"\ntime=2025-06-08T21:18:42.548Z level=WARN msg=\"action_directory_name: action directory name 'InvalidActionExtension' must be lower-case and hyphens only\"\ntime=2025-06-08T21:18:42.548Z level=WARN msg=\"action_directory_name: action directory name 'InvalidActionName' must be lower-case and hyphens only\"\ntime=2025-06-08T21:18:42.548Z level=ERROR msg=\"action_step_action: action 'InvalidActionExtension' step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=2025-06-08T21:18:42.548Z level=ERROR msg=\"action_step_action: action 'InvalidActionName' step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=2025-06-08T21:18:42.548Z level=ERROR msg=\"action_called_step_output_exists: action 'some-action' calls a step 'non-existing-step' output 'output1' but step does not exist\"\ntime=2025-06-08T21:18:42.549Z level=ERROR msg=\"action_step_action: action 'some-action' step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=2025-06-08T21:18:42.550Z level=ERROR msg=\"action_input_required: action 'some-action' input 'output-without-description' does not have a required description\"\ntime=2025-06-08T21:18:42.552Z level=ERROR msg=\"action_step_env: action 'some-action' step 2 env 'InvalidEnvName' must be alphanumeric uppercase and underscore only\"\ntime=2025-06-08T21:18:42.552Z level=ERROR msg=\"action_called_input_exists: action 'some-action' calls an input 'non-existing' that does not exist\"\ntime=2025-06-08T21:18:42.552Z level=ERROR msg=\"workflow_called_input_exists: workflow 'workflow1.yaml' calls an input 'non-existing' that does not exist\"\ntime=2025-06-08T21:18:42.553Z level=ERROR msg=\"workflow_runs_on_not_latest: workflow 'workflow1.yaml' job 'job-2' should not use 'latest' in 'runs-on' field\"\ntime=2025-06-08T21:18:42.554Z level=WARN msg=\"workflow_file_extensions: workflow 'workflow1' file extension must be one of: yml\"\n</code></pre>"},{"location":"demo/#exit-code","title":"Exit code","text":"<p>Tool exits with exit code <code>0</code> when everything is fine.  <code>1</code> when there are errors, <code>2</code> when there are only warnings.  Additionally it may exit with a different code, eg. <code>22</code>.  These numbers indicate another error whilst reading files.</p>"},{"location":"demo/#checking-secrets-and-vars","title":"Checking secrets and vars","text":"<p>octo-linter can scan the code for <code>secrets</code> and <code>variables</code> and compare them with file containing list of defined one.  If there is any <code>secret</code> or <code>var</code> that is not on the list, tool will output info about it.  See below run and its output.</p> <pre><code>docker run --platform=linux/amd64 --rm --name octo-linter \\\n  -v $(pwd)/dot-github:/dot-github \\\n  -v $(pwd):/config \\\n  keenbytes/octo-linter:v1.3.0 \\\n  lint -p /dot-github -l WARN -c /config/config.yml \\\n  -s /config/secrets_list.txt \\\n  -z /config/vars_list.txt \\\n  2&gt;&amp;1 | grep NON_EXISTING_ONE\ntime=2025-06-08T22:09:18.788Z level=ERROR msg=\"workflow_called_variable_exists_in_file: workflow 'workflow1.yaml' calls a variable 'NON_EXISTING_ONE' that does not exist in the vars file\"\ntime=2025-06-08T22:09:18.789Z level=ERROR msg=\"workflow_called_variable_exists_in_file: workflow 'workflow1.yaml' calls a secret 'NON_EXISTING_ONE' that does not exist in the secrets file\"\n</code></pre>"},{"location":"github-actions-workflow/","title":"GitHub Actions Workflow","text":"<p>Below is an example of a workflow that uses octo-linter docker to check files in <code>.github</code>.</p> <pre><code>---\nname: GitHub Actions YAML linter\n\non:\n  pull_request:\n    paths:\n      - '.github/**.yml'\n      - '.github/**.yaml'\n\njobs:\n  main:\n    name: Lint\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run octo-linter\n        run: |\n          # we assume that the dotgithub.yml file \n          # is present in .github directory\n          docker run --rm --name octo-linter \\\n            -v $(pwd)/.github:/dot-github \\\n            keenbytes/octo-linter:v1.3.0 \\\n            lint -p /dot-github -l WARN\n</code></pre>"},{"location":"running-locally/","title":"Running locally","text":""},{"location":"running-locally/#syntax","title":"Syntax","text":"<p>Check below help message for <code>lint</code> command:</p> <pre><code>Usage:  octo-linter lint [FLAGS]\n\nRuns the linter on files from a specific directory\n\nRequired flags: \n  -p,    --path DIR       Path to .github directory\n\nOptional flags: \n  -c,    --config FILE    Linter config with rules in YAML format\n  -l,    --loglevel       One of NONE,ERR,WARN,DEBUG\n  -s,    --secrets-file   Check if secret names exist in this file (one per line)\n  -z,    --vars-file      Check if variable names exist in this file (one per line)\n</code></pre> <p>Use <code>-p</code> argument to point to <code>.github</code> directories.  The tool will search for any actions in the <code>actions</code> directory, where each action is in its own sub-directory and its filename is either <code>action.yaml</code> or <code>action.yml</code>.  And, it will search for workflows' <code>*.yml</code> and <code>*.yaml</code> files in <code>workflows</code> directory.</p> <p>Additionally, all the variable names (meaning <code>${{ var.NAME }}</code>) as well as secrets (<code>${{ secret.NAME }}</code>) in the workflow can be checked against a list of possible names.  Use <code>-z</code> and <code>-s</code> arguments with paths to files containing a list of possible variable or secret names, with names being separated by new line or space.  Check Demo for a sample usage.</p>"},{"location":"running-locally/#download","title":"Download","text":"<p>If not compiled, binary can be download from repository releases.</p>"},{"location":"running-locally/#using-binary","title":"Using binary","text":"<p>Tweak below command with a path pointing to <code>.github</code> and configuration file:</p> <pre><code>./octo-linter lint -p /path/to/.github -l WARN -c config.yaml\n</code></pre>"},{"location":"running-locally/#using-docker-image","title":"Using docker image","text":"<pre><code>docker run --rm --name octo-linter \\\n  -v /path/to/.github:/dot-github -v $(pwd):/config \\\n  keenbytes/octo-linter:v1.3.0 \\\n  lint -p /dot-github -l WARN -c /config/config.yml\n</code></pre>"},{"location":"running-locally/#checking-secrets-and-vars","title":"Checking secrets and vars","text":"<p>Check Demo page to see an example with checking called <code>secrets</code> and <code>vars</code>.</p>"}]}